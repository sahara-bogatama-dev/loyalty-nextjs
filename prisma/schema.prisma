// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
 
model User {
  id            String          @id @default(cuid())
  name          String?         @db.VarChar(255)
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         Bytes?        
  password      String?
  phone         String?        @db.VarChar(50)
  dateOfBirth   String?        @db.VarChar(50)
  leader        String?         @db.VarChar(255)
  inActive      Boolean        @default(false)
  inMobile      Boolean        @default(false)
  accounts      Account[]
  sessions      Session[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @default("bySystem") @db.VarChar(255)
  updatedBy String   @default("bySystem") @db.VarChar(255)

  role Role[]
  pointLoyaalty PointLoyalty[]
}
 
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
  
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

// Creeate Role
model Role {
  roleId String @id  @default(cuid())
  id      String  
  userId  String 
  name    String
  user    User   @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @default("bySystem") @db.VarChar(255)
  updatedBy String   @default("bySystem") @db.VarChar(255)
}

// Create StringMap
model StringMap {
  id            String   @id @default(cuid())
  name          String 
  objectName    String
  key           Int
 
  createdBy String   @default("bySystem") @db.VarChar(255)
  updatedBy String   @default("bySystem") @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//Product
model Product {
  productId     String        @id @default(cuid())
  productName   String        @db.VarChar(255)
  weight        Decimal
  unit          String        @db.VarChar(255)
  productCode   String        @unique() @db.VarChar(255)
  expiredPeriod DateTime
  campaignId    String?       @db.VarChar(255)
  basePoint     Int
  createdBy     String            @default("bySystem") @db.VarChar(255)
  updatedBy     String            @default("bySystem") @db.VarChar(255)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  campaign      Campaign?     @relation(fields: [campaignId], references: [campaignId], onDelete: SetNull)
  
  stokopname Stokopname[]

   @@index([campaignId])
}

model Campaign {
  campaignId   String    @id @default(cuid())
  campaignName String    @db.VarChar(255)
  startDate    DateTime
  endDate      DateTime
  loyaltyPoint Int
  photo        Bytes
  description  String    @db.VarChar(255)
  inActive     Boolean   @default(false)
  createdBy String            @default("bySystem") @db.VarChar(255)
  updatedBy String            @default("bySystem") @db.VarChar(255)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  product      Product[]

  @@index([campaignId])
}

model Agent {
  agentId       String     @id @default(cuid())
  storeAddress  String     @db.VarChar(1000)
  customerName  String     @unique() @db.VarChar(255)
  email         String     @db.VarChar(255)
  noNpwp        String?    @db.VarChar(50)
  phone         String     @db.VarChar(255)
  picName       String     @db.VarChar(255)
  picPhone      String     @db.VarChar(255)
  createdBy     String            @default("bySystem") @db.VarChar(255)
  updatedBy     String            @default("bySystem") @db.VarChar(255)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([agentId])
}

model PackageRedeem {
  packageId     String   @id @default(cuid()) 
  packageName   String?  @db.VarChar(255)
  packageDesc   String?  @db.VarChar(100)
  costPoint       Int
  limit         Int @default(0)
  photo         Bytes?
  inActive      Boolean? @default(false)
  createdBy     String            @default("bySystem") @db.VarChar(255)
  updatedBy     String            @default("bySystem") @db.VarChar(255)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([packageId])
}

model BoothOwner {
  boothId           String   @id @default(uuid()) @db.VarChar(255)
  userId            String   @db.VarChar(255)
  fullname          String?  @db.VarChar(255)
  address           String?  @db.VarChar(1000)
  phone             String?  @db.VarChar(255)
  email             String?  @db.VarChar(255)
  dateEstablishment String?  @db.VarChar(255)
  instagram         String?  @db.VarChar(255)
  facebook          String?  @db.VarChar(255)
  ecommerce         String?  @db.VarChar(255)
  geolocation       String?    @db.VarChar(255)
  createdBy     String            @default("bySystem") @db.VarChar(255)
  updatedBy     String            @default("bySystem") @db.VarChar(255)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  boothMember       Booth[]

  @@index([boothId])
}

model Booth {
  boothMemberId     String     @id @default(cuid()) @db.VarChar(255)
  address           String     @db.VarChar(1000)
  geolocation       String?    @db.VarChar(255)
  photoBooth        Bytes?
  email             String?    @db.VarChar(255)
  fullname          String?    @db.VarChar(255)
  phone             String?    @db.VarChar(255)
  userId            String     @db.VarChar(255)
  boothId           String     
  createdBy         String            @default("bySystem") @db.VarChar(255)
  updatedBy         String            @default("bySystem") @db.VarChar(255)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  boothOwner        BoothOwner @relation(fields: [boothId], references: [boothId], onDelete: Cascade)

  @@index([boothId])
  @@index([boothMemberId])
}


model LabelingProduct {
  labelingProductId      String        @id @default(cuid())
  productId           String        @db.VarChar(255)
  productCode         String        @db.VarChar(255)
  productName         String        @db.VarChar(255)
  codeLabel           String        @unique() @db.VarChar(255)
  bestBefore          DateTime
  shift               Int
  batch               String        @db.VarChar(255)
  status              Int           @default(0)
  labelingBoxId       String?       @db.VarChar(255)
  labelingBox         LabelingBox?     @relation(fields: [labelingBoxId], references: [labelingBoxId], onDelete: SetNull)
  createdBy           String            @default("bySystem") @db.VarChar(255)
  updatedBy           String            @default("bySystem") @db.VarChar(255)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  stokopname Stokopname[]

  @@index([labelingProductId])
  @@index([labelingBoxId])
  @@index([productId])
}

model LabelingBox {
  labelingBoxId        String              @id @default(cuid())
  codeBox           String              @unique @db.VarChar(255)
  leader            String              @db.VarChar(255)
  status            Int                 @default(0)
  labelingProduct   LabelingProduct[]
  createdBy         String              @default("bySystem") @db.VarChar(255)
  updatedBy         String              @default("bySystem") @db.VarChar(255)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  stokopname Stokopname[]
  deliveryOrderProduct DeliveryOrderProduct[]

  @@index([labelingBoxId])
}


model Stokopname {
  stokopnameId       String        @id @default(cuid())
  productId     String        @db.VarChar(255)
  productName   String        @db.VarChar(255)
  productCode   String        @db.VarChar(255)
  weight        Decimal
  unit          String        @db.VarChar(255)
  expiredDate   DateTime
  labelingProduct String        @unique @db.VarChar(255)
  labelingProductId       String        @db.VarChar(255)
  labelingBox   String?       @db.VarChar(255)
  labelingBoxId String?       @db.VarChar(255)
  status        Int           @default(2)
  location      String?       @db.VarChar(5)
  createdBy         String              @default("bySystem") @db.VarChar(255)
  updatedBy         String              @default("bySystem") @db.VarChar(255)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  labelingBoxs      LabelingBox?     @relation(fields: [labelingBoxId], references: [labelingBoxId], onDelete: Restrict)
  labelingProducts  LabelingProduct? @relation(fields: [labelingProductId], references: [labelingProductId], onDelete: Restrict)
  product       Product?      @relation(fields: [productId], references: [productId], onDelete: Restrict)

  @@index([stokopnameId])
  @@index([labelingBoxId])
  @@index([productId])
  @@index([labelingProductId])
}

model DeliveryOrder {
  deliveryOrderId      String              @id @default(cuid()) @db.VarChar(255)
  noSurat           String              @db.VarChar(255)
  orderNo           String              @db.VarChar(255)
  shippingDate      DateTime
  agentId           String              @db.VarChar(255)
  customerName      String              @db.VarChar(255)
  deliveryAddress   String              @db.VarChar(500)
  totalWeight       Decimal
  deliveryNote      String?             @db.VarChar(255)
  status            Int
  receiveDate       DateTime?
  receiveBy         String?             @db.VarChar(255)
  receiveNote       String?             @db.VarChar(255)
  createdBy         String              @default("bySystem") @db.VarChar(255)
  updatedBy         String              @default("bySystem") @db.VarChar(255)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deliveryOrderProduct DeliveryOrderProduct[]

  @@index([deliveryOrderId])
}

model DeliveryOrderProduct {
  deliveryOrderProductId String      @id @default(cuid()) @db.VarChar(255)
  deliveryOrderId         String      @db.VarChar(255)
  shipQty             Int
  labelingBox   String?       @db.VarChar(255)
  labelingBoxId String?       @db.VarChar(255)
  productName   String     
  unit  String   
  receivedQty         Int?
  statusProduct       Int
  createdBy         String              @default("bySystem") @db.VarChar(255)
  updatedBy         String              @default("bySystem") @db.VarChar(255)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deliveryOrder      DeliveryOrder? @relation(fields: [deliveryOrderId], references: [deliveryOrderId], onDelete: Restrict)
  boxs                LabelingBox?   @relation(fields: [labelingBoxId], references: [labelingBoxId], onDelete: Restrict)

  @@index([deliveryOrderProductId])
  @@index([deliveryOrderId])
  @@index([labelingBoxId])
}

model RunningNumber {
  id   String   @id @default(cuid())
  objectName String?  @db.VarChar(255)
  value      Int? 
  createdBy         String              @default("bySystem") @db.VarChar(255)
  updatedBy         String              @default("bySystem") @db.VarChar(255)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([id])
}

model VersionMobile {
  id   String   @id @default(cuid())
  version String?  @db.VarChar(255)
  maintenance      Boolean @default(false) 
  createdBy         String              @default("bySystem") @db.VarChar(255)
  updatedBy         String              @default("bySystem") @db.VarChar(255)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([id])
}


model PointLoyalty {
  pointId      String            @id @default(cuid()) @db.VarChar(255)
  userId       String            @db.VarChar(255)
  point         Int               @default(0)
  createdBy         String              @default("bySystem") @db.VarChar(255)
  updatedBy         String              @default("bySystem") @db.VarChar(255)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  log          PointReceiveLog[]
  userIdData   User?             @relation(fields: [userId], references: [id], onDelete: Restrict)

  @@index([userId])
  @@index([pointId])
}

model PointReceiveLog {
  pointLogId    String        @id @default(cuid()) @db.VarChar(255)
  pointId       String        @db.VarChar(255)
  userId        String        @db.VarChar(255)
  point         Int
  remark        String?       @db.VarChar(500)
  productId     String?       @db.VarChar(255)
  productCode   String?       @db.VarChar(255)
  productName   String?       @db.VarChar(255)
  labelingProductId       String?       @db.VarChar(255)
  labelingProducts String?       @db.VarChar(255)
  scanDate      DateTime?
  campaignId    String?       @db.VarChar(255)
  status       Int
  createdBy         String              @default("bySystem") @db.VarChar(255)
  updatedBy         String              @default("bySystem") @db.VarChar(255)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  pointLoyalty       PointLoyalty? @relation(fields: [pointId], references: [pointId], onDelete: Restrict)

  @@index([pointLogId])
  @@index([pointId])
}

model Redeem {
  redeemId     String   @id @default(uuid()) @db.VarChar(255)
  userId      String?  @db.VarChar(255)
  agentId     String?  @db.VarChar(255)
  fullname     String?  @db.VarChar(255)
  phone        String?  @db.VarChar(255)
  email        String?  @db.VarChar(255)
  packageId   String   @db.VarChar(255)
  packageName String?  @db.VarChar(255)
  redeemCode   String?  @db.VarChar(255)
  status      Int
  createdBy         String              @default("bySystem") @db.VarChar(255)
  updatedBy         String              @default("bySystem") @db.VarChar(255)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([packageId])
}